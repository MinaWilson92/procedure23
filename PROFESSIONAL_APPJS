{submitStatus === 'uploading' && (
                  <Box sx={{ mt: 2 }}>
                    <LinearProgress />
                    <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                      Uploading and processing document...
                    </Typography>
                  </Box>
                )}
              </CardContent>
            </Card>

            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ‚ÑπÔ∏è Submission Guidelines
                </Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon><Info fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="Document Requirements"
                      secondary="PDF or Word format, max 10MB"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Assignment fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="Quality Standards"
                      secondary="Documents are analyzed for completeness"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Share fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="SharePoint Integration"
                      secondary="Optional upload to SharePoint after submission"
                    />
                  </ListItem>
                </List>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>

      {/* Loading Backdrop */}
      <Backdrop
        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
        open={loading && submitStatus === 'uploading'}
      >
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress color="inherit" size={60} />
          <Typography variant="h6" sx={{ mt: 2 }}>
            Processing Procedure...
          </Typography>
          <Typography variant="body2">
            Please wait while we analyze your document
          </Typography>
        </Box>
      </Backdrop>
    </Box>
  );
}

// Submit Procedure Page (Professional Design)
function SubmitProcedurePage(props) {
  return <AdminPanelPage {...props} />;
}

export default App;: Review & Submit */}
                {activeStep >= 2 && documentAnalysis && (
                  <Box sx={{ mb: 4 }}>
                    <Divider sx={{ my: 3 }} />
                    <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CheckCircle color="primary" />
                      Review & Submit
                    </Typography>

                    <Alert severity="info" sx={{ mb: 3 }}>
                      Please review the procedure details before submitting.
                    </Alert>

                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                      <Button
                        variant="outlined"
                        onClick={() => window.location.reload()}
                        startIcon={<Refresh />}
                        disabled={loading}
                      >
                        Reset Form
                      </Button>
                      <Button
                        variant="contained"
                        onClick={handleSubmit}
                        disabled={loading || submitStatus === 'uploading'}
                        startIcon={loading ? <CircularProgress size={20} /> : <Save />}
                        size="large"
                      >
                        {loading ? 'Submitting...' : 'Submit Procedure'}
                      </Button>
                    </Box>
                  </Box>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* Right Panel - Info & Status */}
          <Grid item xs={12} lg={4}>
            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)', mb: 3 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  üìã Submission Status
                </Typography>
                <Box sx={{ mb: 2 }}>
                  <Chip 
                    label={submitStatus.toUpperCase()}
                    color={getStatusColor()}
                    sx={{ mb: 1 }}
                  />
                </Box>
                
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Current Step: {activeStep + 1} of {steps.length}
                </Typography>
                
                {submitStatus === 'analyzing' && (
                  <LinearProgress sx={{ mt: 2 }} />
                )}
                
                {submitStatus === 'uploading' && (
                  <Box sx={{ mt: // Page Router Function
function renderCurrentPage(page, props) {
  switch (page) {
    case 'home':
      return <HomePage {...props} />;
    case 'user-dashboard':
      return <UserDashboardPage {...props} />;
    case 'procedures':
      return <ProceduresPage {...props} />;
    case 'admin-panel':
      return <AdminPanelPage {...props} />;
    case 'submit-procedure':
      return <SubmitProcedurePage {...props} />;
    default:
      return <HomePage {...props} />;
  }
}

// Professional Home Page (from original)
function HomePage({ user, dashboardData, procedures, isAdmin }) {
  const { navigate } = useNavigation();
  const now = new Date();

  const quickLinks = [
    { 
      title: 'All Procedures', 
      path: 'procedures', 
      icon: <Folder />, 
      color: '#1976d2',
      description: 'View all procedures'
    },
    { 
      title: 'My Dashboard', 
      path: 'user-dashboard', 
      icon: <Person />, 
      color: '#388e3c',
      description: 'My procedures dashboard'
    }
  ];

  // Add admin link for admin users
  if (isAdmin) {
    quickLinks.push({ 
      title: 'Upload New', 
      path: 'admin-panel', 
      icon: <CloudSync />, 
      color: '#7b1fa2',
      description: 'Upload procedure'
    });
  }

  return (
    <Box>
      {/* Enhanced Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" fontWeight="bold" gutterBottom>
          HSBC Procedures Hub
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Centralized procedure management with AI-powered quality analysis
        </Typography>
      </Box>

      {user && (
        <Alert severity="success" sx={{ mb: 3 }}>
          Welcome back, <strong>{user.displayName || user.staffId}</strong>! 
          You are logged in as <strong>{user.role}</strong>.
          {user.source && (
            <Typography variant="caption" display="block" sx={{ mt: 0.5, opacity: 0.8 }}>
              Authenticated via: {user.source}
            </Typography>
          )}
        </Alert>
      )}

      {/* Quick Stats from Dashboard Data */}
      {dashboardData?.stats && (
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #1976d2 0%, #1565c0 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(25,118,210,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Total Procedures
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.total || 0}
                      </Typography>
                    </Box>
                    <Dashboard sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(255,152,0,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Need Attention
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.expiringSoon || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={dashboardData.stats.expiringSoon || 0} 
                      color="error"
                      invisible={(dashboardData.stats.expiringSoon || 0) === 0}
                    >
                      <Schedule sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.2 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(244,67,54,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Expired
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.expired || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={dashboardData.stats.expired || 0} 
                      color="error"
                      invisible={(dashboardData.stats.expired || 0) === 0}
                    >
                      <ErrorIcon sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #4caf50 0%, #388e3c 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(76,175,80,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        High Quality
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.highQuality || 0}
                      </Typography>
                      {dashboardData.stats.total > 0 && (
                        <LinearProgress 
                          variant="determinate" 
                          value={(dashboardData.stats.highQuality / dashboardData.stats.total) * 100} 
                          sx={{ 
                            mt: 1,
                            backgroundColor: 'rgba(255,255,255,0.3)',
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: 'rgba(255,255,255,0.8)'
                            }
                          }}
                        />
                      )}
                    </Box>
                    <TrendingUp sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        </Grid>
      )}

      {/* Quick Access Links */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {quickLinks.map((link, index) => (
          <Grid item xs={12} md={4} key={link.path}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}
            >
              <Card 
                sx={{ 
                  height: '100%',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: '0 8px 24px rgba(0,0,0,0.15)',
                    borderColor: alpha(link.color, 0.5)
                  }
                }}
                onClick={() => navigate(link.path)}
              >
                <CardContent sx={{ p: 3 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <Box sx={{ 
                      p: 2, 
                      borderRadius: 3, 
                      bgcolor: alpha(link.color, 0.1),
                      color: link.color,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      mr: 2
                    }}>
                      {link.icon}
                    </Box>
                    <Typography variant="h5" fontWeight="bold" color={link.color}>
                      {link.title}
                    </Typography>
                  </Box>
                  <Typography variant="body1" color="text.secondary">
                    {link.description}
                  </Typography>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        ))}
      </Grid>

      {/* LOB Breakdown (Professional Feature) */}
      {procedures && procedures.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.7 }}
        >
          <Paper sx={{ p: 3, mb: 4 }}>
            <Typography variant="h6" gutterBottom fontWeight="bold">
              üìä Procedures by Line of Business
            </Typography>
            <Grid container spacing={2}>
              {['IWPB', 'CIB', 'GCOO', 'GRM', 'GF', 'GTRB'].map((lob, index) => {
                const lobProcedures = procedures.filter(p => p.lob === lob);
                const lobNames = {
                  'IWPB': 'Investment Banking',
                  'CIB': 'Corporate & Investment Banking',
                  'GCOO': 'Group Chief Operating Office',
                  'GRM': 'Global Risk Management',
                  'GF': 'Global Functions',
                  'GTRB': 'Global Trade & Receivables Finance'
                };
                const colors = ['#1976d2', '#388e3c', '#f57c00', '#d32f2f', '#7b1fa2', '#0288d1'];
                
                return (
                  <Grid item xs={12} sm={6} md={4} lg={2} key={lob}>
                    <Card 
                      sx={{ 
                        textAlign: 'center',
                        border: `2px solid ${colors[index]}`,
                        bgcolor: alpha(colors[index], 0.05),
                        cursor: 'pointer',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: `0 8px 24px ${alpha(colors[index], 0.3)}`
                        }
                      }}
                      onClick={() => navigate('procedures')}
                    >
                      <CardContent sx={{ py: 2 }}>
                        <Typography variant="h4" fontWeight="bold" color={colors[index]}>
                          {lobProcedures.length}
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" gutterBottom>
                          {lob}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {lobNames[lob]}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                );
              })}
            </Grid>
          </Paper>
        </motion.div>
      )}
    </Box>
  );
}

// Professional User Dashboard Page (from original final_user_dashboard.js)
function UserDashboardPage({ user, procedures, dashboardData }) {
  const { navigate } = useNavigation();
  const [loading, setLoading] = useState(!dashboardData);
  const [error, setError] = useState(null);

  // Filter user's procedures
  const userProcedures = procedures.filter(proc => 
    proc.primary_owner === user?.staffId || 
    proc.secondary_owner === user?.staffId ||
    proc.uploaded_by === user?.staffId
  );

  const now = new Date();
  const stats = {
    total: userProcedures.length,
    expiringSoon: userProcedures.filter(p => {
      const expiry = new Date(p.expiry);
      const daysLeft = Math.ceil((expiry - now) / (1000 * 60 * 60 * 24));
      return daysLeft > 0 && daysLeft <= 30;
    }).length,
    expired: userProcedures.filter(p => new Date(p.expiry) < now).length,
    highQuality: userProcedures.filter(p => (p.score || 0) >= 80).length
  };

  const getActivityIcon = (activity) => {
    switch (activity.type) {
      case 'update':
        return <CheckCircle color="success" />;
      case 'warning':
        return <Warning color="warning" />;
      case 'assignment':
        return <Assignment color="primary" />;
      case 'expired':
        return <ErrorIcon color="error" />;
      default:
        return <Star color="primary" />;
    }
  };

  const quickLinks = [
    { 
      title: 'All Procedures', 
      path: 'procedures', 
      icon: <Folder />, 
      color: '#1976d2',
      description: 'View all procedures'
    },
    { 
      title: 'My Procedures', 
      path: 'procedures', 
      icon: <Person />, 
      color: '#388e3c',
      description: 'Procedures I own'
    }
  ];

  // Add admin link for admin users
  if (user?.role === 'admin') {
    quickLinks.push({ 
      title: 'Upload New', 
      path: 'admin-panel', 
      icon: <CloudSync />, 
      color: '#7b1fa2',
      description: 'Upload procedure'
    });
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#f5f6fa' }}>
      {/* Enhanced Header with SharePoint User Info */}
      <Box sx={{ 
        background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',
        color: 'white',
        py: 3,
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        mb: 4,
        mx: -3,
        mt: -3
      }}>
        <Container maxWidth="lg">
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Box sx={{ flex: 1 }}>
              <Typography variant="h4" fontWeight="bold">
                My Dashboard
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mt: 1 }}>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Welcome back, {dashboardData?.userInfo?.displayName || user?.displayName || user?.staffId}
                </Typography>
                {(dashboardData?.userInfo?.department || user?.department) && (
                  <Chip 
                    label={dashboardData?.userInfo?.department || user?.department} 
                    size="small"
                    sx={{ 
                      backgroundColor: 'rgba(255,255,255,0.15)',
                      color: 'white',
                      fontSize: '0.7rem'
                    }}
                    icon={<Business sx={{ color: 'white !important' }} />}
                  />
                )}
              </Box>
              {(dashboardData?.userInfo?.email || user?.email) && (
                <Typography variant="caption" sx={{ opacity: 0.7, display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                  <Email fontSize="small" />
                  {dashboardData?.userInfo?.email || user?.email}
                </Typography>
              )}
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Chip 
                label={user?.role || 'User'} 
                size="small"
                sx={{ 
                  backgroundColor: user?.role === 'admin' ? '#f44336' : 'rgba(255,255,255,0.2)',
                  color: 'white',
                  fontWeight: 'bold'
                }}
              />
              {(dashboardData?.userInfo?.jobTitle || user?.jobTitle) && (
                <Chip 
                  label={dashboardData?.userInfo?.jobTitle || user?.jobTitle} 
                  size="small"
                  sx={{ 
                    backgroundColor: 'rgba(255,255,255,0.1)',
                    color: 'white',
                    fontWeight: 'normal',
                    fontSize: '0.7rem'
                  }}
                />
              )}
            </Box>
          </Box>
        </Container>
      </Box>

      <Container maxWidth="lg">
        {/* Enhanced Stats Cards */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #1976d2 0%, #1565c0 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(25,118,210,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        My Procedures
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.total || 0}
                      </Typography>
                    </Box>
                    <Dashboard sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(255,152,0,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Need Attention
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.expiringSoon || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={stats.expiringSoon || 0} 
                      color="error"
                      invisible={(stats.expiringSoon || 0) === 0}
                    >
                      <Schedule sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.2 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(244,67,54,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Expired
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.expired || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={stats.expired || 0} 
                      color="error"
                      invisible={(stats.expired || 0) === 0}
                    >
                      <ErrorIcon sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #4caf50 0%, #388e3c 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(76,175,80,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        High Quality
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.highQuality || 0}
                      </Typography>
                      {stats.total > 0 && (
                        <LinearProgress 
                          variant="determinate" 
                          value={(stats.highQuality / stats.total) * 100} 
                          sx={{ 
                            mt: 1,
                            backgroundColor: 'rgba(255,255,255,0.3)',
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: 'rgba(255,255,255,0.8)'
                            }
                          }}
                        />
                      )}
                    </Box>
                    <TrendingUp sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        </Grid>

        <Grid container spacing={3}>
          {/* Enhanced Recent Activity */}
          <Grid item xs={12} md={8}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.4 }}
            >
              <Paper sx={{ p: 3, height: '100%', boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <History />
                    <Typography variant="h6" fontWeight="bold">
                      Recent Activity
                    </Typography>
                  </Box>
                  <Button 
                    size="small" 
                    onClick={() => navigate('procedures')}
                    endIcon={<OpenInNew />}
                  >
                    View All
                  </Button>
                </Box>
                
                <List sx={{ py: 0 }}>
                  {dashboardData?.recentActivity && dashboardData.recentActivity.length > 0 ? dashboardData.recentActivity.map((activity, index) => (
                    <React.Fragment key={activity.id || index}>
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon sx={{ minWidth: 40 }}>
                          {getActivityIcon(activity)}
                        </ListItemIcon>
                        <ListItemText
                          primary={
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" fontWeight="medium">
                                {activity.action}
                              </Typography>
                              {activity.score && (
                                <Chip 
                                  label={`${activity.score}%`}
                                  size="small"
                                  color={activity.score >= 80 ? 'success' : 'warning'}
                                  sx={{ fontSize: '0.7rem', height: 20 }}
                                />
                              )}
                            </Box>
                          }
                          secondary={
                            <Box>
                              <Typography variant="body2" component="span" color="primary.main">
                                {activity.procedure}
                              </Typography>
                              <Typography variant="caption" display="block" color="text.secondary">
                                {activity.time}
                              </Typography>
                            </Box>
                          }
                        />
                      </ListItem>
                      {index < dashboardData.recentActivity.length - 1 && <Divider />}
                    </React.Fragment>
                  )) : (
                    <Box sx={{ textAlign: 'center', py: 4 }}>
                      <History sx={{ fontSize: 48, color: 'text.disabled', mb: 2 }} />
                      <Typography color="text.secondary" variant="h6" gutterBottom>
                        No recent activity
                      </Typography>
                      <Typography color="text.secondary" variant="body2">
                        Your procedure activities will appear here
                      </Typography>
                    </Box>
                  )}
                </List>
              </Paper>
            </motion.div>
          </Grid>

          {/* Enhanced Quick Access */}
          <Grid item xs={12} md={4}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.5 }}
            >
              <Paper sx={{ p: 3, height: '100%', boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                  <Dashboard />
                  <Typography variant="h6" fontWeight="bold">
                    Quick Access
                  </Typography>
                </Box>
                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  {quickLinks.map((link, index) => (
                    <motion.div
                      key={link.path}
                      whileHover={{ x: 4 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      <Card 
                        sx={{ 
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            boxShadow: '0 6px 16px rgba(0,0,0,0.15)',
                            borderColor: alpha(link.color, 0.5),
                            transform: 'translateY(-2px)'
                          }
                        }}
                        onClick={() => navigate(link.path)}
                      >
                        <CardContent sx={{ py: 2 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                            <Box sx={{ 
                              p: 1.5, 
                              borderRadius: 2, 
                              bgcolor: alpha(link.color, 0.1),
                              color: link.color,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center'
                            }}>
                              {link.icon}
                            </Box>
                            <Box sx={{ flex: 1 }}>
                              <Typography variant="body1" fontWeight="medium" gutterBottom>
                                {link.title}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                {link.description}
                              </Typography>
                            </Box>
                          </Box>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </Box>
              // SharePoint-Compatible Professional HSBC Procedures Hub
// Using SharePointContext.js for authentication

import React, { useState, useEffect, createContext, useContext } from 'react';
import {
  Box, Container, Typography, Card, CardContent, Button, Grid, 
  AppBar, Toolbar, IconButton, Menu, MenuItem, Avatar, Chip,
  Drawer, List, ListItem, ListItemIcon, ListItemText, Divider,
  Alert, CircularProgress, Paper, useTheme, alpha, Badge,
  TextField, Select, FormControl, InputLabel, LinearProgress,
  Stepper, Step, StepLabel, StepContent, Dialog, DialogTitle,
  DialogContent, DialogActions, Backdrop, Skeleton
} from '@mui/material';
import {
  Dashboard, Assignment, Settings, AccountCircle, Notifications,
  Menu as MenuIcon, Home, BarChart, PeopleAlt, CloudUpload,
  Description, Timeline, Assessment, Security, Refresh,
  AdminPanelSettings, Person, Business, CalendarToday,
  ArrowBack, CheckCircle, Error, Warning, Info, Folder,
  AttachFile, Share, Save, Cancel, TrendingUp, TrendingDown,
  OpenInNew, History, Star, CloudSync, Email, Schedule,
  Error as ErrorIcon
} from '@mui/material/icons';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { motion } from 'framer-motion';

// Import your working SharePoint Context
import { SharePointProvider, useSharePoint } from './SharePointContext';

// HSBC Professional Theme
const theme = createTheme({
  palette: {
    primary: {
      main: '#d40000', // HSBC Red
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#1976d2',
      contrastText: '#ffffff',
    },
    background: {
      default: '#f5f6fa',
      paper: '#ffffff',
    },
  },
  typography: {
    fontFamily: '"Segoe UI", "Roboto", "Helvetica", "Arial", sans-serif',
    h4: { fontWeight: 600 },
    h5: { fontWeight: 600 },
    h6: { fontWeight: 600 },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          fontWeight: 600,
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
          borderRadius: 12,
        },
      },
    },
  },
});

// Navigation Context (replaces React Router)
const NavigationContext = createContext();

const NavigationProvider = ({ children }) => {
  const [currentPage, setCurrentPage] = useState('home');
  const [pageData, setPageData] = useState({});

  const navigate = (page, data = {}) => {
    setCurrentPage(page);
    setPageData(data);
    console.log('üìç Navigating to:', page);
  };

  return (
    <NavigationContext.Provider value={{ currentPage, pageData, navigate }}>
      {children}
    </NavigationContext.Provider>
  );
};

// Custom hooks
const useNavigation = () => useContext(NavigationContext);

// Main App Component
function App() {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <SharePointProvider>
        <NavigationProvider>
          <HSBCProceduresHub />
        </NavigationProvider>
      </SharePointProvider>
    </ThemeProvider>
  );
}

// Main Hub Component (Professional Design Preserved)
function HSBCProceduresHub() {
  const { user, isAuthenticated, isAdmin } = useSharePoint(); // Using your SharePoint context
  const { currentPage } = useNavigation();
  const [drawerOpen, setDrawerOpen] = useState(false);
  const [procedures, setProcedures] = useState([]);
  const [dashboardData, setDashboardData] = useState(null);
  const [loading, setLoading] = useState(true);
  const theme = useTheme();

  useEffect(() => {
    if (user && isAuthenticated) {
      loadInitialData();
    }
  }, [user, isAuthenticated]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      
      // Load procedures
      const procResponse = await fetch('/ProceduresHubEG6/api/procedures');
      if (procResponse.ok) {
        const procData = await procResponse.json();
        setProcedures(procData);
        console.log('‚úÖ Procedures loaded:', procData.length);
      }

      // Load dashboard data
      const dashResponse = await fetch('/ProceduresHubEG6/api/user/dashboard');
      if (dashResponse.ok) {
        const dashData = await dashResponse.json();
        setDashboardData(dashData);
        console.log('‚úÖ Dashboard data loaded');
      }
    } catch (err) {
      console.error('‚ùå Error loading data:', err);
    } finally {
      setLoading(false);
    }
  };

  // Show loading while SharePoint context initializes
  if (!isAuthenticated) {
    return null; // SharePointProvider handles loading/error states
  }

  if (loading) {
    return (
      <Box sx={{ minHeight: '100vh', bgcolor: '#f5f6fa' }}>
        <Container maxWidth="lg" sx={{ pt: 4 }}>
          <Grid container spacing={3}>
            {[1, 2, 3, 4].map(n => (
              <Grid item xs={12} sm={6} md={3} key={n}>
                <Skeleton variant="rectangular" height={120} sx={{ borderRadius: 2 }} />
              </Grid>
            ))}
          </Grid>
        </Container>
      </Box>
    );
  }

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh', bgcolor: '#f5f6fa' }}>
      {/* Professional App Bar */}
      <AppBar position="fixed" sx={{ 
        zIndex: theme.zIndex.drawer + 1,
        background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)'
      }}>
        <Toolbar>
          <IconButton
            color="inherit"
            edge="start"
            onClick={() => setDrawerOpen(!drawerOpen)}
            sx={{ mr: 2 }}
          >
            <MenuIcon />
          </IconButton>
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexGrow: 1 }}>
            <Box sx={{
              width: 60, height: 30,
              background: 'linear-gradient(135deg, #d40000, #b30000)',
              color: 'white',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontWeight: 'bold',
              fontSize: '12px',
              borderRadius: 1
            }}>
              HSBC
            </Box>
            <Typography variant="h6" component="div">
              Procedures Hub
            </Typography>
          </Box>

          {user && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Badge badgeContent={dashboardData?.stats?.expiringSoon || 0} color="error">
                <Notifications />
              </Badge>
              <Chip 
                avatar={<Avatar sx={{ bgcolor: '#d40000' }}>{user.displayName?.[0] || 'U'}</Avatar>}
                label={user.displayName || user.staffId}
                variant="outlined"
                sx={{ color: 'white', borderColor: 'white' }}
              />
              <Chip 
                label={user.role || 'User'}
                size="small"
                sx={{ 
                  bgcolor: user.role === 'admin' ? '#f44336' : 'rgba(255,255,255,0.2)',
                  color: 'white'
                }}
              />
            </Box>
          )}
        </Toolbar>
      </AppBar>

      {/* Professional Navigation Drawer */}
      <NavigationDrawer 
        open={drawerOpen} 
        onClose={() => setDrawerOpen(false)}
        user={user}
        isAdmin={isAdmin}
      />

      {/* Main Content */}
      <Box component="main" sx={{ 
        flexGrow: 1, 
        pt: 8, 
        minHeight: '100vh'
      }}>
        <Container maxWidth="xl" sx={{ py: 3 }}>
          {renderCurrentPage(currentPage, { 
            procedures, 
            dashboardData, 
            user, 
            isAdmin,
            onDataRefresh: loadInitialData 
          })}
        </Container>
      </Box>
    </Box>
  );
}

// Professional Navigation Drawer (from original)
function NavigationDrawer({ open, onClose, user, isAdmin }) {
  const { navigate } = useNavigation();

  const menuItems = [
    { id: 'home', label: 'Home', icon: <Home />, color: '#2196f3' },
    { id: 'user-dashboard', label: 'My Dashboard', icon: <Dashboard />, color: '#4caf50' },
    { id: 'procedures', label: 'All Procedures', icon: <Description />, color: '#ff9800' },
  ];

  // Only show admin items for admin users
  if (isAdmin) {
    menuItems.push(
      { id: 'admin-panel', label: 'Admin Panel', icon: <AdminPanelSettings />, color: '#f44336' },
      { id: 'submit-procedure', label: 'Upload Procedure', icon: <CloudUpload />, color: '#607d8b' }
    );
  }

  const handleNavigation = (pageId) => {
    navigate(pageId);
    onClose();
  };

  return (
    <Drawer
      variant="temporary"
      open={open}
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: 280,
          boxSizing: 'border-box',
          mt: 8
        },
      }}
    >
      <Box sx={{ p: 2 }}>
        <Typography variant="h6" gutterBottom>
          Navigation
        </Typography>
        <Divider />
      </Box>

      <List>
        {menuItems.map((item) => (
          <ListItem 
            button 
            key={item.id}
            onClick={() => handleNavigation(item.id)}
            sx={{
              '&:hover': {
                bgcolor: alpha(item.color, 0.1),
                '& .MuiListItemIcon-root': {
                  color: item.color
                }
              }
            }}
          >
            <ListItemIcon sx={{ color: item.color }}>
              {item.icon}
            </ListItemIcon>
            <ListItemText primary={item.label} />
          </ListItem>
        ))}
      </List>

      <Divider />
      
      <Box sx={{ p: 2, mt: 'auto' }}>
        <Typography variant="caption" color="text.secondary">
          HSBC Procedures Hub v4.1.0 (SharePoint Compatible)
        </Typography>
      </Box>
    </Drawer>
  );
}Icon />
          </IconButton>
          
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexGrow: 1 }}>
            <Box sx={{
              width: 60, height: 30,
              background: 'linear-gradient(135deg, #d40000, #b30000)',
              color: 'white',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontWeight: 'bold',
              fontSize: '12px',
              borderRadius: 1
            }}>
              HSBC
            </Box>
            <Typography variant="h6" component="div">
              Procedures Hub
            </Typography>
          </Box>

                        {user && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Badge badgeContent={dashboardData?.stats?.expiringSoon || 0} color="error">
                <Notifications />
              </Badge>
              <Chip 
                avatar={<Avatar sx={{ bgcolor: '#d40000' }}>{user.displayName?.[0] || 'U'}</Avatar>}
                label={user.displayName || user.staffId}
                variant="outlined"
                sx={{ color: 'white', borderColor: 'white' }}
              />
              <Chip 
                label={user.role || 'User'}
                size="small"
                sx={{ 
                  bgcolor: user.role === 'admin' ? '#f44336' : 'rgba(255,255,255,0.2)',
                  color: 'white'
                }}
              />
              {user.department && (
                <Chip 
                  label={user.department}
                  size="small"
                  sx={{ 
                    bgcolor: 'rgba(255,255,255,0.1)',
                    color: 'white',
                    fontSize: '0.7rem'
                  }}
                />
              )}
            </Box>
          )}
        </Toolbar>
      </AppBar>

      {/* Professional Navigation Drawer */}
      <NavigationDrawer 
        open={drawerOpen} 
        onClose={() => setDrawerOpen(false)}
        user={user}
      />

      {/* Main Content */}
      <Box component="main" sx={{ 
        flexGrow: 1, 
        pt: 8, 
        minHeight: '100vh'
      }}>
        <Container maxWidth="xl" sx={{ py: 3 }}>
          {renderCurrentPage(currentPage, { 
            procedures, 
            dashboardData, 
            user, 
            onDataRefresh: loadInitialData 
          })}
        </Container>
      </Box>
    </Box>
  );
}

// Professional Navigation Drawer (from original)
function NavigationDrawer({ open, onClose, user }) {
  const { navigate } = useNavigation();

  const menuItems = [
    { id: 'home', label: 'Home', icon: <Home />, color: '#2196f3' },
    { id: 'user-dashboard', label: 'My Dashboard', icon: <Dashboard />, color: '#4caf50' },
    { id: 'procedures', label: 'All Procedures', icon: <Description />, color: '#ff9800' },
  ];

  // Only show admin items for admin users
  if (user?.role === 'admin') {
    menuItems.push(
      { id: 'admin-panel', label: 'Admin Panel', icon: <AdminPanelSettings />, color: '#f44336' },
      { id: 'submit-procedure', label: 'Upload Procedure', icon: <CloudUpload />, color: '#607d8b' }
    );
  }

  const handleNavigation = (pageId) => {
    navigate(pageId);
    onClose();
  };

  return (
    <Drawer
      variant="temporary"
      open={open}
      onClose={onClose}
      sx={{
        '& .MuiDrawer-paper': {
          width: 280,
          boxSizing: 'border-box',
          mt: 8
        },
      }}
    >
      <Box sx={{ p: 2 }}>
        <Typography variant="h6" gutterBottom>
          Navigation
        </Typography>
        <Divider />
      </Box>

      <List>
        {menuItems.map((item) => (
          <ListItem 
            button 
            key={item.id}
            onClick={() => handleNavigation(item.id)}
            sx={{
              '&:hover': {
                bgcolor: alpha(item.color, 0.1),
                '& .MuiListItemIcon-root': {
                  color: item.color
                }
              }
            }}
          >
            <ListItemIcon sx={{ color: item.color }}>
              {item.icon}
            </ListItemIcon>
            <ListItemText primary={item.label} />
          </ListItem>
        ))}
      </List>

      <Divider />
      
      <Box sx={{ p: 2, mt: 'auto' }}>
        <Typography variant="caption" color="text.secondary">
          HSBC Procedures Hub v4.1.0 (SharePoint Compatible)
        </Typography>
      </Box>
    </Drawer>
  );
}

// Page Router Function
function renderCurrentPage(page, props) {
  switch (page) {
    case 'home':
      return <HomePage {...props} />;
    case 'user-dashboard':
      return <UserDashboardPage {...props} />;
    case 'procedures':
      return <ProceduresPage {...props} />;
    case 'admin-panel':
      return <AdminPanelPage {...props} />;
    case 'submit-procedure':
      return <SubmitProcedurePage {...props} />;
    default:
      return <HomePage {...props} />;
  }
}

// Professional Home Page (from original)
function HomePage({ user, dashboardData, procedures }) {
  const { navigate } = useNavigation();
  const now = new Date();

  const quickLinks = [
    { 
      title: 'All Procedures', 
      path: 'procedures', 
      icon: <Folder />, 
      color: '#1976d2',
      description: 'View all procedures'
    },
    { 
      title: 'My Dashboard', 
      path: 'user-dashboard', 
      icon: <Person />, 
      color: '#388e3c',
      description: 'My procedures dashboard'
    }
  ];

  // Add admin link for admin users
  if (user?.role === 'admin') {
    quickLinks.push({ 
      title: 'Upload New', 
      path: 'admin-panel', 
      icon: <CloudSync />, 
      color: '#7b1fa2',
      description: 'Upload procedure'
    });
  }

  return (
    <Box>
      {/* Enhanced Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" fontWeight="bold" gutterBottom>
          HSBC Procedures Hub
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Centralized procedure management with AI-powered quality analysis
        </Typography>
      </Box>

      {user && (
        <Alert severity="success" sx={{ mb: 3 }}>
          Welcome back, <strong>{user.displayName || user.staffId}</strong>! 
          You are logged in as <strong>{user.role}</strong>.
        </Alert>
      )}

      {/* Quick Stats from Dashboard Data */}
      {dashboardData?.stats && (
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #1976d2 0%, #1565c0 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(25,118,210,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Total Procedures
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.total || 0}
                      </Typography>
                    </Box>
                    <Dashboard sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(255,152,0,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Need Attention
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.expiringSoon || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={dashboardData.stats.expiringSoon || 0} 
                      color="error"
                      invisible={(dashboardData.stats.expiringSoon || 0) === 0}
                    >
                      <Schedule sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.2 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(244,67,54,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Expired
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.expired || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={dashboardData.stats.expired || 0} 
                      color="error"
                      invisible={(dashboardData.stats.expired || 0) === 0}
                    >
                      <ErrorIcon sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #4caf50 0%, #388e3c 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(76,175,80,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        High Quality
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {dashboardData.stats.highQuality || 0}
                      </Typography>
                      {dashboardData.stats.total > 0 && (
                        <LinearProgress 
                          variant="determinate" 
                          value={(dashboardData.stats.highQuality / dashboardData.stats.total) * 100} 
                          sx={{ 
                            mt: 1,
                            backgroundColor: 'rgba(255,255,255,0.3)',
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: 'rgba(255,255,255,0.8)'
                            }
                          }}
                        />
                      )}
                    </Box>
                    <TrendingUp sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        </Grid>
      )}

      {/* Quick Access Links */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {quickLinks.map((link, index) => (
          <Grid item xs={12} md={4} key={link.path}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}
            >
              <Card 
                sx={{ 
                  height: '100%',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  '&:hover': {
                    transform: 'translateY(-4px)',
                    boxShadow: '0 8px 24px rgba(0,0,0,0.15)',
                    borderColor: alpha(link.color, 0.5)
                  }
                }}
                onClick={() => navigate(link.path)}
              >
                <CardContent sx={{ p: 3 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <Box sx={{ 
                      p: 2, 
                      borderRadius: 3, 
                      bgcolor: alpha(link.color, 0.1),
                      color: link.color,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      mr: 2
                    }}>
                      {link.icon}
                    </Box>
                    <Typography variant="h5" fontWeight="bold" color={link.color}>
                      {link.title}
                    </Typography>
                  </Box>
                  <Typography variant="body1" color="text.secondary">
                    {link.description}
                  </Typography>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        ))}
      </Grid>

      {/* LOB Breakdown (Professional Feature) */}
      {procedures && procedures.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.7 }}
        >
          <Paper sx={{ p: 3, mb: 4 }}>
            <Typography variant="h6" gutterBottom fontWeight="bold">
              üìä Procedures by Line of Business
            </Typography>
            <Grid container spacing={2}>
              {['IWPB', 'CIB', 'GCOO', 'GRM', 'GF', 'GTRB'].map((lob, index) => {
                const lobProcedures = procedures.filter(p => p.lob === lob);
                const lobNames = {
                  'IWPB': 'Investment Banking',
                  'CIB': 'Corporate & Investment Banking',
                  'GCOO': 'Group Chief Operating Office',
                  'GRM': 'Global Risk Management',
                  'GF': 'Global Functions',
                  'GTRB': 'Global Trade & Receivables Finance'
                };
                const colors = ['#1976d2', '#388e3c', '#f57c00', '#d32f2f', '#7b1fa2', '#0288d1'];
                
                return (
                  <Grid item xs={12} sm={6} md={4} lg={2} key={lob}>
                    <Card 
                      sx={{ 
                        textAlign: 'center',
                        border: `2px solid ${colors[index]}`,
                        bgcolor: alpha(colors[index], 0.05),
                        cursor: 'pointer',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: `0 8px 24px ${alpha(colors[index], 0.3)}`
                        }
                      }}
                      onClick={() => navigate('procedures')}
                    >
                      <CardContent sx={{ py: 2 }}>
                        <Typography variant="h4" fontWeight="bold" color={colors[index]}>
                          {lobProcedures.length}
                        </Typography>
                        <Typography variant="body2" fontWeight="bold" gutterBottom>
                          {lob}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {lobNames[lob]}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                );
              })}
            </Grid>
          </Paper>
        </motion.div>
      )}
    </Box>
  );
}

// Professional User Dashboard Page (from original final_user_dashboard.js)
function UserDashboardPage({ user, procedures, dashboardData }) {
  const { navigate } = useNavigation();
  const [loading, setLoading] = useState(!dashboardData);
  const [error, setError] = useState(null);

  // Filter user's procedures
  const userProcedures = procedures.filter(proc => 
    proc.primary_owner === user?.staffId || 
    proc.secondary_owner === user?.staffId ||
    proc.uploaded_by === user?.staffId
  );

  const now = new Date();
  const stats = {
    total: userProcedures.length,
    expiringSoon: userProcedures.filter(p => {
      const expiry = new Date(p.expiry);
      const daysLeft = Math.ceil((expiry - now) / (1000 * 60 * 60 * 24));
      return daysLeft > 0 && daysLeft <= 30;
    }).length,
    expired: userProcedures.filter(p => new Date(p.expiry) < now).length,
    highQuality: userProcedures.filter(p => (p.score || 0) >= 80).length
  };

  const getActivityIcon = (activity) => {
    switch (activity.type) {
      case 'update':
        return <CheckCircle color="success" />;
      case 'warning':
        return <Warning color="warning" />;
      case 'assignment':
        return <Assignment color="primary" />;
      case 'expired':
        return <ErrorIcon color="error" />;
      default:
        return <Star color="primary" />;
    }
  };

  const quickLinks = [
    { 
      title: 'All Procedures', 
      path: 'procedures', 
      icon: <Folder />, 
      color: '#1976d2',
      description: 'View all procedures'
    },
    { 
      title: 'My Procedures', 
      path: 'procedures', 
      icon: <Person />, 
      color: '#388e3c',
      description: 'Procedures I own'
    }
  ];

  // Add admin link for admin users
  if (user?.role === 'admin') {
    quickLinks.push({ 
      title: 'Upload New', 
      path: 'admin-panel', 
      icon: <CloudSync />, 
      color: '#7b1fa2',
      description: 'Upload procedure'
    });
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#f5f6fa' }}>
      {/* Enhanced Header with IT Cookie User Info */}
      <Box sx={{ 
        background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',
        color: 'white',
        py: 3,
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        mb: 4,
        mx: -3,
        mt: -3
      }}>
        <Container maxWidth="lg">
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Box sx={{ flex: 1 }}>
              <Typography variant="h4" fontWeight="bold">
                My Dashboard
              </Typography>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mt: 1 }}>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Welcome back, {dashboardData?.userInfo?.displayName || user?.displayName || user?.staffId}
                </Typography>
                {dashboardData?.userInfo?.department && (
                  <Chip 
                    label={dashboardData.userInfo.department} 
                    size="small"
                    sx={{ 
                      backgroundColor: 'rgba(255,255,255,0.15)',
                      color: 'white',
                      fontSize: '0.7rem'
                    }}
                    icon={<Business sx={{ color: 'white !important' }} />}
                  />
                )}
              </Box>
              {dashboardData?.userInfo?.email && (
                <Typography variant="caption" sx={{ opacity: 0.7, display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                  <Email fontSize="small" />
                  {dashboardData.userInfo.email}
                </Typography>
              )}
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Chip 
                label={user?.role || 'User'} 
                size="small"
                sx={{ 
                  backgroundColor: user?.role === 'admin' ? '#f44336' : 'rgba(255,255,255,0.2)',
                  color: 'white',
                  fontWeight: 'bold'
                }}
              />
              {dashboardData?.userInfo?.jobTitle && (
                <Chip 
                  label={dashboardData.userInfo.jobTitle} 
                  size="small"
                  sx={{ 
                    backgroundColor: 'rgba(255,255,255,0.1)',
                    color: 'white',
                    fontWeight: 'normal',
                    fontSize: '0.7rem'
                  }}
                />
              )}
            </Box>
          </Box>
        </Container>
      </Box>

      <Container maxWidth="lg">
        {/* Enhanced Stats Cards */}
        <Grid container spacing={3} sx={{ mb: 4 }}>
          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #1976d2 0%, #1565c0 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(25,118,210,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        My Procedures
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.total || 0}
                      </Typography>
                    </Box>
                    <Dashboard sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.1 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #ff9800 0%, #f57c00 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(255,152,0,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Need Attention
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.expiringSoon || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={stats.expiringSoon || 0} 
                      color="error"
                      invisible={(stats.expiringSoon || 0) === 0}
                    >
                      <Schedule sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.2 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(244,67,54,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        Expired
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.expired || 0}
                      </Typography>
                    </Box>
                    <Badge 
                      badgeContent={stats.expired || 0} 
                      color="error"
                      invisible={(stats.expired || 0) === 0}
                    >
                      <ErrorIcon sx={{ fontSize: 50, opacity: 0.3 }} />
                    </Badge>
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>

          <Grid item xs={12} sm={6} md={3}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: 0.3 }}
            >
              <Card sx={{ 
                height: '100%', 
                background: 'linear-gradient(135deg, #4caf50 0%, #388e3c 100%)', 
                color: 'white',
                boxShadow: '0 4px 12px rgba(76,175,80,0.3)'
              }}>
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <Box>
                      <Typography color="rgba(255,255,255,0.8)" variant="body2" gutterBottom>
                        High Quality
                      </Typography>
                      <Typography variant="h3" fontWeight="bold">
                        {stats.highQuality || 0}
                      </Typography>
                      {stats.total > 0 && (
                        <LinearProgress 
                          variant="determinate" 
                          value={(stats.highQuality / stats.total) * 100} 
                          sx={{ 
                            mt: 1,
                            backgroundColor: 'rgba(255,255,255,0.3)',
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: 'rgba(255,255,255,0.8)'
                            }
                          }}
                        />
                      )}
                    </Box>
                    <TrendingUp sx={{ fontSize: 50, opacity: 0.3 }} />
                  </Box>
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        </Grid>

        <Grid container spacing={3}>
          {/* Enhanced Recent Activity */}
          <Grid item xs={12} md={8}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.4 }}
            >
              <Paper sx={{ p: 3, height: '100%', boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <History />
                    <Typography variant="h6" fontWeight="bold">
                      Recent Activity
                    </Typography>
                  </Box>
                  <Button 
                    size="small" 
                    onClick={() => navigate('procedures')}
                    endIcon={<OpenInNew />}
                  >
                    View All
                  </Button>
                </Box>
                
                <List sx={{ py: 0 }}>
                  {dashboardData?.recentActivity && dashboardData.recentActivity.length > 0 ? dashboardData.recentActivity.map((activity, index) => (
                    <React.Fragment key={activity.id || index}>
                      <ListItem sx={{ px: 0 }}>
                        <ListItemIcon sx={{ minWidth: 40 }}>
                          {getActivityIcon(activity)}
                        </ListItemIcon>
                        <ListItemText
                          primary={
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                              <Typography variant="body2" fontWeight="medium">
                                {activity.action}
                              </Typography>
                              {activity.score && (
                                <Chip 
                                  label={`${activity.score}%`}
                                  size="small"
                                  color={activity.score >= 80 ? 'success' : 'warning'}
                                  sx={{ fontSize: '0.7rem', height: 20 }}
                                />
                              )}
                            </Box>
                          }
                          secondary={
                            <Box>
                              <Typography variant="body2" component="span" color="primary.main">
                                {activity.procedure}
                              </Typography>
                              <Typography variant="caption" display="block" color="text.secondary">
                                {activity.time}
                              </Typography>
                            </Box>
                          }
                        />
                      </ListItem>
                      {index < dashboardData.recentActivity.length - 1 && <Divider />}
                    </React.Fragment>
                  )) : (
                    <Box sx={{ textAlign: 'center', py: 4 }}>
                      <History sx={{ fontSize: 48, color: 'text.disabled', mb: 2 }} />
                      <Typography color="text.secondary" variant="h6" gutterBottom>
                        No recent activity
                      </Typography>
                      <Typography color="text.secondary" variant="body2">
                        Your procedure activities will appear here
                      </Typography>
                    </Box>
                  )}
                </List>
              </Paper>
            </motion.div>
          </Grid>

          {/* Enhanced Quick Access */}
          <Grid item xs={12} md={4}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, delay: 0.5 }}
            >
              <Paper sx={{ p: 3, height: '100%', boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                  <Dashboard />
                  <Typography variant="h6" fontWeight="bold">
                    Quick Access
                  </Typography>
                </Box>
                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  {quickLinks.map((link, index) => (
                    <motion.div
                      key={link.path}
                      whileHover={{ x: 4 }}
                      transition={{ type: "spring", stiffness: 300 }}
                    >
                      <Card 
                        sx={{ 
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          '&:hover': {
                            boxShadow: '0 6px 16px rgba(0,0,0,0.15)',
                            borderColor: alpha(link.color, 0.5),
                            transform: 'translateY(-2px)'
                          }
                        }}
                        onClick={() => navigate(link.path)}
                      >
                        <CardContent sx={{ py: 2 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                            <Box sx={{ 
                              p: 1.5, 
                              borderRadius: 2, 
                              bgcolor: alpha(link.color, 0.1),
                              color: link.color,
                              display: 'flex',
                              alignItems: 'center',
                              justifyContent: 'center'
                            }}>
                              {link.icon}
                            </Box>
                            <Box sx={{ flex: 1 }}>
                              <Typography variant="body1" fontWeight="medium" gutterBottom>
                                {link.title}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                {link.description}
                              </Typography>
                            </Box>
                          </Box>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </Box>
              </Paper>
            </motion.div>
          </Grid>
        </Grid>

        {/* Enhanced Notifications */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.6 }}
        >
          <Paper sx={{ 
            p: 3, 
            mt: 3,
            background: stats.expiringSoon > 0 ? 
              alpha(theme.palette.warning.main, 0.08) : 
              alpha(theme.palette.info.main, 0.08),
            border: `1px solid ${stats.expiringSoon > 0 ? 
              alpha(theme.palette.warning.main, 0.2) : 
              alpha(theme.palette.info.main, 0.2)}`,
            boxShadow: '0 4px 12px rgba(0,0,0,0.08)'
          }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              {stats.expiringSoon > 0 ? (
                <Warning color="warning" sx={{ fontSize: 28 }} />
              ) : (
                <Notifications color="info" sx={{ fontSize: 28 }} />
              )}
              <Box sx={{ flex: 1 }}>
                <Typography variant="h6" fontWeight="bold" gutterBottom>
                  {stats.expiringSoon > 0 ? 'Action Required' : 'Stay Informed'}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {stats.expiringSoon > 0 ? (
                    `You have ${stats.expiringSoon} procedure${stats.expiringSoon !== 1 ? 's' : ''} requiring attention within the next 30 days. ${stats.expired > 0 ? `Additionally, ${stats.expired} procedure${stats.expired !== 1 ? 's have' : ' has'} already expired.` : ''}`
                  ) : (
                    `All your procedures are up to date! You own ${stats.total || 0} procedure${(stats.total || 0) !== 1 ? 's' : ''} with ${stats.highQuality || 0} meeting high quality standards.`
                  )}
                </Typography>
              </Box>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button 
                  variant="contained" 
                  size="small"
                  color={stats.expiringSoon > 0 ? 'warning' : 'primary'}
                  onClick={() => navigate('procedures')}
                >
                  {stats.expiringSoon > 0 ? 'Review Now' : 'View Procedures'}
                </Button>
                {stats.total === 0 && user?.role === 'admin' && (
                  <Button 
                    variant="outlined" 
                    size="small"
                    onClick={() => navigate('admin-panel')}
                  >
                    Upload First Procedure
                  </Button>
                )}
              </Box>
            </Box>
          </Paper>
        </motion.div>
      </Container>
    </Box>
  );
}

// Professional Procedures Page
function ProceduresPage({ procedures }) {
  const now = new Date();

  const getStatusColor = (expiry) => {
    const expiryDate = new Date(expiry);
    const daysLeft = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));
    
    if (daysLeft < 0) return '#f44336'; // Red for expired
    if (daysLeft <= 30) return '#ff9800'; // Orange for expiring soon
    return '#4caf50'; // Green for active
  };

  const getStatusText = (expiry) => {
    const expiryDate = new Date(expiry);
    const daysLeft = Math.ceil((expiryDate - now) / (1000 * 60 * 60 * 24));
    
    if (daysLeft < 0) return `EXPIRED (${Math.abs(daysLeft)} days ago)`;
    if (daysLeft <= 30) return `${daysLeft} days left`;
    return `${daysLeft} days left`;
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" fontWeight="bold">
          üìÑ All Procedures ({procedures.length})
        </Typography>
        <Button
          variant="contained"
          startIcon={<Refresh />}
          onClick={() => window.location.reload()}
        >
          Refresh
        </Button>
      </Box>
      
      <Grid container spacing={3}>
        {procedures.map((proc) => (
          <Grid item xs={12} sm={6} md={4} key={proc.id}>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <Card sx={{ 
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                '&:hover': {
                  boxShadow: '0 8px 24px rgba(0,0,0,0.12)',
                  transform: 'translateY(-2px)'
                },
                transition: 'all 0.3s ease'
              }}>
                <CardContent sx={{ flex: 1 }}>
                  <Typography variant="h6" gutterBottom noWrap title={proc.name}>
                    {proc.name}
                  </Typography>
                  
                  <Box sx={{ mb: 2 }}>
                    <Chip 
                      label={getStatusText(proc.expiry)}
                      size="small"
                      sx={{ 
                        backgroundColor: getStatusColor(proc.expiry),
                        color: 'white',
                        fontWeight: 'bold'
                      }}
                    />
                  </Box>

                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    <Business sx={{ fontSize: 16, mr: 0.5, verticalAlign: 'middle' }} />
                    LOB: {proc.lob}
                  </Typography>
                  
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    <Person sx={{ fontSize: 16, mr: 0.5, verticalAlign: 'middle' }} />
                    Owner: {proc.primary_owner}
                  </Typography>
                  
                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    <CalendarToday sx={{ fontSize: 16, mr: 0.5, verticalAlign: 'middle' }} />
                    Expiry: {new Date(proc.expiry).toLocaleDateString()}
                  </Typography>

                  {proc.score && (
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="body2" gutterBottom>
                        Quality Score: <strong>{proc.score}%</strong>
                      </Typography>
                      <Box sx={{
                        width: '100%',
                        height: 8,
                        bgcolor: '#e0e0e0',
                        borderRadius: 4,
                        overflow: 'hidden'
                      }}>
                        <Box sx={{
                          width: `${proc.score}%`,
                          height: '100%',
                          bgcolor: proc.score >= 80 ? '#4caf50' : proc.score >= 60 ? '#ff9800' : '#f44336',
                          borderRadius: 4
                        }} />
                      </Box>
                    </Box>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          </Grid>
        ))}
      </Grid>
      
      {procedures.length === 0 && (
        <Card sx={{ textAlign: 'center', py: 8 }}>
          <CardContent>
            <Description sx={{ fontSize: 80, color: 'text.disabled', mb: 2 }} />
            <Typography variant="h5" color="text.secondary" gutterBottom>
              No procedures found
            </Typography>
            <Typography variant="body1" color="text.secondary">
              Procedures will appear here once they are uploaded to the system.
            </Typography>
          </CardContent>
        </Card>
      )}
    </Box>
  );
}

// Professional Admin Panel Page (from original complete_submit_procedure_page.js)
function AdminPanelPage({ onDataRefresh, user }) {
  const [formData, setFormData] = useState({
    name: '',
    expiry: '',
    primary_owner: user?.staffId || '',
    primary_owner_email: user?.email || '',
    secondary_owner: '',
    secondary_owner_email: '',
    lob: '',
    procedure_subsection: '',
    sharepoint_folder: ''
  });

  const [selectedFile, setSelectedFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [submitStatus, setSubmitStatus] = useState('ready');
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [activeStep, setActiveStep] = useState(0);
  const [documentAnalysis, setDocumentAnalysis] = useState(null);

  // LOB options
  const lobOptions = [
    { value: 'IWPB', label: 'IWPB - Investment Banking' },
    { value: 'CIB', label: 'CIB - Corporate & Investment Banking' },
    { value: 'GCOO', label: 'GCOO - Group Chief Operating Office' },
    { value: 'GRM', label: 'GRM - Global Risk Management' },
    { value: 'GF', label: 'GF - Global Functions' },
    { value: 'GTRB', label: 'GTRB - Global Trade & Receivables Finance' }
  ];

  // Procedure subsection options based on LOB
  const subsectionOptions = {
    'IWPB': ['Credit Risk', 'Market Risk', 'Operational Risk', 'Compliance'],
    'CIB': ['Trading', 'Sales', 'Research', 'Credit'],
    'GCOO': ['Operations', 'Technology', 'Change Management', 'Project Management'],
    'GRM': ['Risk Assessment', 'Risk Monitoring', 'Risk Reporting', 'Model Risk'],
    'GF': ['Human Resources', 'Finance', 'Legal', 'Audit'],
    'GTRB': ['Trade Finance', 'Supply Chain', 'Cash Management', 'Securities Services']
  };

  // Stepper steps
  const steps = [
    { label: 'Procedure Details', description: 'Enter procedure information' },
    { label: 'Document Upload', description: 'Upload and analyze document' },
    { label: 'Review & Submit', description: 'Review and submit procedure' }
  ];

  // Set default expiry date (1 year from now)
  useEffect(() => {
    const defaultExpiry = new Date();
    defaultExpiry.setFullYear(defaultExpiry.getFullYear() + 1);
    setFormData(prev => ({
      ...prev,
      expiry: defaultExpiry.toISOString().split('T')[0]
    }));
  }, []);

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Reset subsection when LOB changes
    if (name === 'lob') {
      setFormData(prev => ({
        ...prev,
        procedure_subsection: ''
      }));
    }
  };

  // Handle file selection
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedFile(file);
      setDocumentAnalysis(null);
      
      // Validate file type
      const allowedTypes = [
        'application/pdf',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/msword'
      ];
      
      if (!allowedTypes.includes(file.type)) {
        setError('Please select a PDF or Word document (.pdf, .docx, .doc)');
        setSelectedFile(null);
        return;
      }

      // Validate file size (max 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError('File size must be less than 10MB');
        setSelectedFile(null);
        return;
      }

      setError(null);
      setActiveStep(1);
    }
  };

  // Analyze document
  const analyzeDocument = async () => {
    if (!selectedFile) return;

    try {
      setSubmitStatus('analyzing');
      setError(null);

      const formDataForAnalysis = new FormData();
      formDataForAnalysis.append('file', selectedFile);
      formDataForAnalysis.append('name', formData.name);
      formDataForAnalysis.append('lob', formData.lob);

      const response = await fetch('/ProceduresHubEG6/api/procedures', {
        method: 'POST',
        body: formDataForAnalysis
      });

      const result = await response.json();

      if (result.accepted) {
        setDocumentAnalysis(result.analysis);
        setActiveStep(2);
        setSubmitStatus('ready');
      } else {
        setError(result.message);
        setSubmitStatus('ready');
      }

    } catch (err) {
      setError('Document analysis failed: ' + err.message);
      setSubmitStatus('ready');
    }
  };

  // Submit procedure
  const handleSubmit = async () => {
    try {
      setLoading(true);
      setSubmitStatus('uploading');
      setError(null);

      // Validate required fields
      if (!formData.name || !formData.lob || !selectedFile) {
        setError('Please fill in all required fields and select a file');
        setLoading(false);
        setSubmitStatus('ready');
        return;
      }

      const submitData = new FormData();
      submitData.append('file', selectedFile);
      Object.keys(formData).forEach(key => {
        submitData.append(key, formData[key]);
      });

      const response = await fetch('/ProceduresHubEG6/api/procedures', {
        method: 'POST',
        body: submitData
      });

      const result = await response.json();

      if (result.accepted) {
        setSubmitStatus('success');
        setSuccess('Procedure submitted successfully!');
        
        // Reset form
        setFormData({
          name: '',
          expiry: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          primary_owner: user?.staffId || '',
          primary_owner_email: user?.email || '',
          secondary_owner: '',
          secondary_owner_email: '',
          lob: '',
          procedure_subsection: '',
          sharepoint_folder: ''
        });
        setSelectedFile(null);
        setActiveStep(0);
        setDocumentAnalysis(null);
        
        // Refresh data
        if (onDataRefresh) {
          setTimeout(onDataRefresh, 1000);
        }
        
      } else {
        setError(result.message);
        setSubmitStatus('error');
      }

    } catch (err) {
      setError('Submission failed: ' + err.message);
      setSubmitStatus('error');
    } finally {
      setLoading(false);
    }
  };

  // Get status color
  const getStatusColor = () => {
    switch (submitStatus) {
      case 'success': return 'success';
      case 'error': return 'error';
      case 'analyzing':
      case 'uploading': return 'info';
      default: return 'default';
    }
  };

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#f5f6fa' }}>
      {/* Professional Header */}
      <Box sx={{ 
        background: 'linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%)',
        color: 'white',
        py: 3,
        boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        mb: 4,
        mx: -3,
        mt: -3
      }}>
        <Container maxWidth="lg">
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Box sx={{ flex: 1 }}>
              <Typography variant="h4" fontWeight="bold">
                Admin Panel - Upload Procedure
              </Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>
                Upload and configure a new procedure document with AI analysis
              </Typography>
            </Box>
            <Chip 
              label={user?.role || 'Admin'} 
              size="small"
              sx={{ 
                backgroundColor: '#f44336',
                color: 'white',
                fontWeight: 'bold'
              }}
            />
          </Box>
        </Container>
      </Box>

      <Container maxWidth="lg">
        {/* Status Alert */}
        {(error || success) && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <Alert 
              severity={error ? 'error' : 'success'} 
              sx={{ mb: 3 }}
              action={
                error && (
                  <Button color="inherit" size="small" onClick={() => setError(null)}>
                    Dismiss
                  </Button>
                )
              }
            >
              {error || success}
            </Alert>
          </motion.div>
        )}

        {/* Main Content */}
        <Grid container spacing={3}>
          {/* Left Panel - Form */}
          <Grid item xs={12} lg={8}>
            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
              <CardContent sx={{ p: 4 }}>
                {/* Progress Stepper */}
                <Stepper activeStep={activeStep} orientation="vertical" sx={{ mb: 4 }}>
                  {steps.map((step, index) => (
                    <Step key={step.label}>
                      <StepLabel>
                        <Typography variant="h6">{step.label}</Typography>
                      </StepLabel>
                      <StepContent>
                        <Typography variant="body2" color="text.secondary">
                          {step.description}
                        </Typography>
                      </StepContent>
                    </Step>
                  ))}
                </Stepper>

                {/* Step 1: Procedure Details */}
                {activeStep >= 0 && (
                  <Box sx={{ mb: 4 }}>
                    <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <Assignment color="primary" />
                      Procedure Information
                    </Typography>
                    
                    <Grid container spacing={3}>
                      <Grid item xs={12}>
                        <TextField
                          fullWidth
                          label="Procedure Name"
                          name="name"
                          value={formData.name}
                          onChange={handleInputChange}
                          required
                          variant="outlined"
                          placeholder="Enter a descriptive name for the procedure"
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <FormControl fullWidth required>
                          <InputLabel>Line of Business (LOB)</InputLabel>
                          <Select
                            name="lob"
                            value={formData.lob}
                            onChange={handleInputChange}
                            label="Line of Business (LOB)"
                          >
                            {lobOptions.map(option => (
                              <MenuItem key={option.value} value={option.value}>
                                {option.label}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <FormControl fullWidth disabled={!formData.lob}>
                          <InputLabel>Procedure Subsection</InputLabel>
                          <Select
                            name="procedure_subsection"
                            value={formData.procedure_subsection}
                            onChange={handleInputChange}
                            label="Procedure Subsection"
                          >
                            {formData.lob && subsectionOptions[formData.lob]?.map(option => (
                              <MenuItem key={option} value={option}>
                                {option}
                              </MenuItem>
                            ))}
                          </Select>
                        </FormControl>
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Primary Owner"
                          name="primary_owner"
                          value={formData.primary_owner}
                          onChange={handleInputChange}
                          required
                          variant="outlined"
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Primary Owner Email"
                          name="primary_owner_email"
                          value={formData.primary_owner_email}
                          onChange={handleInputChange}
                          type="email"
                          variant="outlined"
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Secondary Owner"
                          name="secondary_owner"
                          value={formData.secondary_owner}
                          onChange={handleInputChange}
                          variant="outlined"
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Secondary Owner Email"
                          name="secondary_owner_email"
                          value={formData.secondary_owner_email}
                          onChange={handleInputChange}
                          type="email"
                          variant="outlined"
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="Expiry Date"
                          name="expiry"
                          value={formData.expiry}
                          onChange={handleInputChange}
                          type="date"
                          required
                          variant="outlined"
                          InputLabelProps={{ shrink: true }}
                        />
                      </Grid>

                      <Grid item xs={12} sm={6}>
                        <TextField
                          fullWidth
                          label="SharePoint Folder Path"
                          name="sharepoint_folder"
                          value={formData.sharepoint_folder}
                          onChange={handleInputChange}
                          variant="outlined"
                          placeholder="Optional: Custom SharePoint folder"
                        />
                      </Grid>
                    </Grid>

                    {formData.name && formData.lob && (
                      <Button
                        variant="contained"
                        onClick={() => setActiveStep(1)}
                        sx={{ mt: 3 }}
                        startIcon={<CloudUpload />}
                      >
                        Continue to Document Upload
                      </Button>
                    )}
                  </Box>
                )}

                {/* Step 2: Document Upload */}
                {activeStep >= 1 && (
                  <Box sx={{ mb: 4 }}>
                    <Divider sx={{ my: 3 }} />
                    <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CloudUpload color="primary" />
                      Document Upload & Analysis
                    </Typography>

                    <Box sx={{ 
                      border: '2px dashed #d0d0d0',
                      borderRadius: 2,
                      p: 4,
                      textAlign: 'center',
                      bgcolor: selectedFile ? '#f8f9fa' : 'background.paper',
                      transition: 'all 0.3s ease'
                    }}>
                      {!selectedFile ? (
                        <>
                          <CloudUpload sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                          <Typography variant="h6" gutterBottom>
                            Select Procedure Document
                          </Typography>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Upload a PDF or Word document (.pdf, .docx, .doc)
                          </Typography>
                          <Button
                            variant="contained"
                            component="label"
                            sx={{ mt: 2 }}
                            startIcon={<AttachFile />}
                          >
                            Choose File
                            <input
                              type="file"
                              hidden
                              accept=".pdf,.docx,.doc"
                              onChange={handleFileChange}
                            />
                          </Button>
                        </>
                      ) : (
                        <Box>
                          <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />
                          <Typography variant="h6" gutterBottom>
                            File Selected: {selectedFile.name}
                          </Typography>
                          <Typography variant="body2" color="text.secondary" gutterBottom>
                            Size: {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                          </Typography>
                          
                          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', mt: 2 }}>
                            <Button
                              variant="outlined"
                              onClick={() => setSelectedFile(null)}
                              startIcon={<Cancel />}
                            >
                              Remove File
                            </Button>
                            <Button
                              variant="contained"
                              onClick={analyzeDocument}
                              disabled={submitStatus === 'analyzing'}
                              startIcon={submitStatus === 'analyzing' ? <CircularProgress size={20} /> : <Assignment />}
                            >
                              {submitStatus === 'analyzing' ? 'Analyzing...' : 'Analyze Document'}
                            </Button>
                          </Box>
                        </Box>
                      )}
                    </Box>

                    {/* Document Analysis Results */}
                    {documentAnalysis && (
                      <Card variant="outlined" sx={{ mt: 3 }}>
                        <CardContent>
                          <Typography variant="h6" gutterBottom>
                            üìä Document Quality Analysis
                          </Typography>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                            <Chip 
                              label={`${documentAnalysis.score}%`}
                              color={documentAnalysis.score >= 80 ? 'success' : documentAnalysis.score >= 60 ? 'warning' : 'error'}
                              size="large"
                            />
                            <Typography variant="body1">
                              Quality Score
                            </Typography>
                          </Box>
                          
                          {documentAnalysis.details?.missingElements?.length > 0 && (
                            <Alert severity="warning" sx={{ mt: 2 }}>
                              <Typography variant="body2" gutterBottom>
                                <strong>Missing Elements:</strong>
                              </Typography>
                              <List dense>
                                {documentAnalysis.details.missingElements.map((element, index) => (
                                  <ListItem key={index} sx={{ py: 0 }}>
                                    <ListItemIcon sx={{ minWidth: 20 }}>
                                      <Warning fontSize="small" color="warning" />
                                    </ListItemIcon>
                                    <ListItemText primary={element} />
                                  </ListItem>
                                ))}
                              </List>
                            </Alert>
                          )}
                        </CardContent>
                      </Card>
                    )}
                  </Box>
                )}

                {/* Step 3: Review & Submit */}
                {activeStep >= 2 && documentAnalysis && (
                  <Box sx={{ mb: 4 }}>
                    <Divider sx={{ my: 3 }} />
                    <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CheckCircle color="primary" />
                      Review & Submit
                    </Typography>

                    <Alert severity="info" sx={{ mb: 3 }}>
                      Please review the procedure details before submitting.
                    </Alert>

                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                      <Button
                        variant="outlined"
                        onClick={() => window.location.reload()}
                        startIcon={<Refresh />}
                        disabled={loading}
                      >
                        Reset Form
                      </Button>
                      <Button
                        variant="contained"
                        onClick={handleSubmit}
                        disabled={loading || submitStatus === 'uploading'}
                        startIcon={loading ? <CircularProgress size={20} /> : <Save />}
                        size="large"
                      >
                        {loading ? 'Submitting...' : 'Submit Procedure'}
                      </Button>
                    </Box>
                  </Box>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* Right Panel - Info & Status */}
          <Grid item xs={12} lg={4}>
            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)', mb: 3 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  üìã Submission Status
                </Typography>
                <Box sx={{ mb: 2 }}>
                  <Chip 
                    label={submitStatus.toUpperCase()}
                    color={getStatusColor()}
                    sx={{ mb: 1 }}
                  />
                </Box>
                
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Current Step: {activeStep + 1} of {steps.length}
                </Typography>
                
                {submitStatus === 'analyzing' && (
                  <LinearProgress sx={{ mt: 2 }} />
                )}
                
                {submitStatus === 'uploading' && (
                  <Box sx={{ mt: 2 }}>
                    <LinearProgress />
                    <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                      Uploading and processing document...
                    </Typography>
                  </Box>
                )}
              </CardContent>
            </Card>

            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ‚ÑπÔ∏è Submission Guidelines
                </Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon><Info fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="Document Requirements"
                      secondary="PDF or Word format, max 10MB"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Assignment fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="Quality Standards"
                      secondary="Documents are analyzed for completeness"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Share fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="SharePoint Integration"
                      secondary="Seamless integration with SharePoint"
                    />
                  </ListItem>
                </List>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>

      {/* Loading Backdrop */}
      <Backdrop
        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
        open={loading && submitStatus === 'uploading'}
      >
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress color="inherit" size={60} />
          <Typography variant="h6" sx={{ mt: 2 }}>
            Processing Procedure...
          </Typography>
          <Typography variant="body2">
            Please wait while we analyze your document
          </Typography>
        </Box>
      </Backdrop>
    </Box>
  );
}

// Submit Procedure Page (Professional Design)
function SubmitProcedurePage(props) {
  return <AdminPanelPage {...props} />;
}

export default App;: Review & Submit */}
                {activeStep >= 2 && documentAnalysis && (
                  <Box sx={{ mb: 4 }}>
                    <Divider sx={{ my: 3 }} />
                    <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      <CheckCircle color="primary" />
                      Review & Submit
                    </Typography>

                    <Alert severity="info" sx={{ mb: 3 }}>
                      Please review the procedure details before submitting.
                    </Alert>

                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                      <Button
                        variant="outlined"
                        onClick={() => window.location.reload()}
                        startIcon={<Refresh />}
                        disabled={loading}
                      >
                        Reset Form
                      </Button>
                      <Button
                        variant="contained"
                        onClick={handleSubmit}
                        disabled={loading || submitStatus === 'uploading'}
                        startIcon={loading ? <CircularProgress size={20} /> : <Save />}
                        size="large"
                      >
                        {loading ? 'Submitting...' : 'Submit Procedure'}
                      </Button>
                    </Box>
                  </Box>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* Right Panel - Info & Status */}
          <Grid item xs={12} lg={4}>
            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)', mb: 3 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  üìã Submission Status
                </Typography>
                <Box sx={{ mb: 2 }}>
                  <Chip 
                    label={submitStatus.toUpperCase()}
                    color={getStatusColor()}
                    sx={{ mb: 1 }}
                  />
                </Box>
                
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Current Step: {activeStep + 1} of {steps.length}
                </Typography>
                
                {submitStatus === 'analyzing' && (
                  <LinearProgress sx={{ mt: 2 }} />
                )}
                
                {submitStatus === 'uploading' && (
                  <Box sx={{ mt: 2 }}>
                    <LinearProgress />
                    <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                      Uploading and processing document...
                    </Typography>
                  </Box>
                )}
              </CardContent>
            </Card>

            <Card sx={{ boxShadow: '0 4px 12px rgba(0,0,0,0.08)' }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ‚ÑπÔ∏è Submission Guidelines
                </Typography>
                <List dense>
                  <ListItem>
                    <ListItemIcon><Info fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="Document Requirements"
                      secondary="PDF or Word format, max 10MB"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Assignment fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="Quality Standards"
                      secondary="Documents are analyzed for completeness"
                    />
                  </ListItem>
                  <ListItem>
                    <ListItemIcon><Share fontSize="small" /></ListItemIcon>
                    <ListItemText 
                      primary="SharePoint Integration"
                      secondary="Optional upload to SharePoint after submission"
                    />
                  </ListItem>
                </List>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Container>

      {/* Loading Backdrop */}
      <Backdrop
        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
        open={loading && submitStatus === 'uploading'}
      >
        <Box sx={{ textAlign: 'center' }}>
          <CircularProgress color="inherit" size={60} />
          <Typography variant="h6" sx={{ mt: 2 }}>
            Processing Procedure...
          </Typography>
          <Typography variant="body2">
            Please wait while we analyze your document
          </Typography>
        </Box>
      </Backdrop>
    </Box>
  );
}

// Submit Procedure Page (Professional Design)
function SubmitProcedurePage(props) {
  return <AdminPanelPage {...props} />;
}

export default App;
